group ASTTreeParser;
finishedBacktracking(block) ::= <<
<if(backtracking)>
if <actions.(actionScope).synpredgate>
  <block>
end
<else>
<block>
<endif>
>>


ruleDeclarations() ::= <<
<super.ruleDeclarations()>
_first_0 = nil
_last = nil<\n>
>>


noRewrite(rewriteBlockLevel, treeLevel) ::= <<
<finishedBacktracking({
<if(rewriteMode)>
return_value.tree = _first_0
if @adaptor.parent(return_value.tree) && @adaptor.flat_list?(@adaptor.parent(return_value.tree))
  return_value.tree = @adaptor.parent(return_value.tree)
end
<endif>
})>
>>
tree(root, actionsAfterRoot, children, nullableChildList,
     enclosingTreeLevel, treeLevel) ::= <<
_last = @input.look
_save_last_<treeLevel> = _last
_first_<treeLevel> = nil
<if(!rewriteMode)>
root_<treeLevel> = @adaptor.create_flat_list!<\n>
<endif>
<root:element()>
<if(rewriteMode)>
<finishedBacktracking({
<if(root.el.rule)>
_first_<enclosingTreeLevel>.nil? and _first_<enclosingTreeLevel> = <root.el.label; format="label">.tree<\n>
<else>
_first_<enclosingTreeLevel>.nil? and _first_<enclosingTreeLevel> = <root.el.label; format="label"><\n>
<endif>
})>
<endif>
<actionsAfterRoot:element()>
<if(nullableChildList)>
if @input.peek == DOWN
  match(DOWN, nil)
  <children:element()>
  match(UP, nil)
end
<else>
match(DOWN, nil)
<children:element()>
match(UP, nil)<\n>
<endif>
<if(!rewriteMode)>
@adaptor.add_child(root_<enclosingTreeLevel>, root_<treeLevel>)<\n>
<endif>
_last = _save_last_<treeLevel>

>>


tokenRefBang(token,label,elementIndex) ::= <<
_last = @input.look
<super.tokenRef(...)>
>>
tokenRef(token,label,elementIndex,hetero) ::= <<
_last = @input.look
<super.tokenRef(...)>
<if(!rewriteMode)>
<finishedBacktracking({
<if(hetero)>
tree_for_<label> = <hetero; format="constantPath">.new(<label; format="label">)
<else>
tree_for_<label> = @adaptor.copy_node(<label; format="label">)
<endif><\n>
@adaptor.add_child(root_<treeLevel>, tree_for_<label>)
})>
<else> <! rewrite mode !>
<finishedBacktracking({
_first_<treeLevel> ||= <label; format="label"><\n>
})>
<endif>
>>


tokenRefAndListLabel(token,label,elementIndex,hetero) ::= <<
<tokenRef(...)>
<listLabel(elem={<label; format="label">},...)>
>>
tokenRefRuleRoot(token,label,elementIndex,hetero) ::= <<
_last = @input.look
<super.tokenRef(...)>
<if(!rewriteMode)>
<finishedBacktracking({
<if(hetero)>
tree_for_<label> = <hetero; format="constantPath">.new(<label; format="label">)
<else>
tree_for_<label> = @adaptor.copy_node(<label; format="label">)
<endif><\n>
root_<treeLevel> = @adaptor.become_root(tree_for_<label>, root_<treeLevel>)
})>
<endif>
>>


tokenRefRuleRootAndListLabel(token,label,elementIndex,hetero) ::= <<
<tokenRefRuleRoot(...)>
<listLabel(elem={<label; format="label">},...)>
>>


wildcard(token,label,elementIndex,hetero) ::= <<
_last = @input.look
<super.wildcard(...)>
<if(!rewriteMode)>
<finishedBacktracking({
tree_for_<label> = @adaptor.copy_tree(<label; format="label">)
@adaptor.add_child(root_<treeLevel>, tree_for_<label>)
})>
<else> <! rewrite mode !>
<finishedBacktracking({
_first_<treeLevel> and _first_<treeLevel> = <label; format="label">
})>
<endif>
>>
matchSet(s,label,hetero,elementIndex,postmatchCode) ::= <<
_last = @input.look
<super.matchSet(..., postmatchCode={
<if(!rewriteMode)>
<finishedBacktracking({
<if(hetero)>
tree_for_<label> = <hetero; format="constantPath">.new(<label; format="label">)
<else>
tree_for_<label> = @adaptor.copy_node(<label; format="label">)
<endif><\n>
@adaptor.add_child(root_<treeLevel>, tree_for_<label>)
})>
<endif>
})>
>>


matchRuleBlockSet(s,label,hetero,elementIndex,postmatchCode,treeLevel="0") ::= <<
<matchSet(...)>
<noRewrite()> <! set return tree !>
>>


matchSetBang(s,label,elementIndex,postmatchCode) ::= <<
_last = @input.look
<super.matchSet(...)>
>>
matchSetRuleRoot(s,label,hetero,elementIndex,debug) ::= <<
<super.matchSet(..., postmatchCode={
<if(!rewriteMode)>
<finishedBacktracking({
<if(hetero)>
tree_for_<label> = <hetero; format="constantPath">.new(<label; format="label">)
<else>
tree_for_<label> = @adaptor.copy_node(<label; format="label">)
<endif><\n>
root_<treeLevel> = @adaptor.become_root(tree_for_<label>, root_<treeLevel>)
})>
<endif>
})>
>>


ruleRef(rule,label,elementIndex,args,scope) ::= <<
_last = @input.look
<super.ruleRef(...)>
<finishedBacktracking({
<if(!rewriteMode)>
@adaptor.add_child(root_<treeLevel>, <label; format="label">.tree)
<else> <! rewrite mode !>
_first_<treeLevel>.nil? and _first_<treeLevel> = <label; format="label">.tree<\n>
<endif>
})>
>>


ruleRefAndListLabel(rule,label,elementIndex,args,scope) ::= <<
<ruleRef(...)>
<listLabel(elem={<label; format="label">.tree},...)>
>>


ruleRefRuleRoot(rule,label,elementIndex,args,scope) ::= <<
_last = @input.look
<super.ruleRef(...)>
<if(!rewriteMode)>
<finishedBacktracking({
root_<treeLevel> = @adaptor.become_root(<label; format="label">.tree, root_<treeLevel>)
})>
<endif>
>>


ruleRefRuleRootAndListLabel(rule,label,elementIndex,args,scope) ::= <<
<ruleRefRuleRoot(...)>
<listLabel(elem={<label; format="label">.tree},...)>
>>


ruleRefTrack(rule,label,elementIndex,args,scope) ::= <<
_last = @input.look
<super.ruleRefTrack(...)>
>>


ruleRefTrackAndListLabel(rule,label,elementIndex,args,scope) ::= <<
_last = @input.look
<super.ruleRefTrackAndListLabel(...)>
>>


ruleRefRuleRootTrack(rule,label,elementIndex,args,scope) ::= <<
_last = @input.look
<super.ruleRefRootTrack(...)>
>>


ruleRefRuleRootTrackAndListLabel(rule,label,elementIndex,args,scope) ::= <<
_last = @input.look
<super.ruleRefRuleRootTrackAndListLabel(...)>
>>
createRewriteNodeFromElement(token,hetero,scope) ::= <<
<if(hetero)>
<hetero; format="constantPath">.new(stream_<token>.next_node)
<else>
stream_<token>.next_node
<endif>
>>
ruleCleanUp() ::= <<
<super.ruleCleanUp()>
<if(!rewriteMode)>
<finishedBacktracking({
return_value.tree = @adaptor.rule_post_processing(root_0)
})>
<endif>
>>

