#!/usr/bin/ruby
# encoding: utf-8

####################################################################################################
################################### establish project environment ##################################
####################################################################################################
load './config/antlr3.rb'

def run( name )
  Rake::Task.task_defined?( name ) or file( name )
  task = Rake::Task[ name ]
  task.needed? and task.invoke
end

def abs( path ); File.expand_path( path ); end
def rel( path, dir = '.' ); File.relative_path( path, dir ); end

####################################################################################################
######################################### task definitions #########################################
####################################################################################################

# tasks concerning the development environment
desc "update development gem dependencies using config/gemfile"
task :update do
  $project.load_task 'update_gems'
end

desc "update gems and setup project development environment"
task :setup => %w(update) do
  $project.load_environment
end

if $project.setup?
  require 'rake/testtask'
  require 'spec/rake/spectask'
  require 'rake/gempackagetask'
  require 'rake/rdoctask'
  require 'rcov/rcovtask'
  
  # tasks concerning the ANTLR java package
  namespace :antlr do
    
    desc "build the antlr jar"
    task :build do
      $project.load_task 'antlr'
    end
    
    desc "clean the java directory"
    task :clean do
      $project.java?( 'org' ) and rm_r( $project.java( 'org' ) )
    end
    
  end
  
  $project.load_task( :test )
  
  desc( "run all tests" )
  task :test => %w( test:all )
  
  Rake::GemPackageTask.new( $project.gem_specification ) do | t |
    t.need_zip = true
  end
  
  Rake::RDocTask.new do | t |
    t.rdoc_files.include( 'lib/**/*.rb' )
    t.rdoc_dir = 'doc/rdoc'
  end
  
  namespace :notes do
    desc( "find and list FIXME notes in the library and test source code")
    task :FIXME do
      require 'source-notes'
      color_map = { :tag => 'red', :text => 'yellow' }
      files = $project.package_files.select { |path| test( ?f, path ) }
      SourceNote.scan( 'FIXME', files ) do |note|
        puts( note.to_s( color_map ) )
      end
    end
    
    desc( "find and list TODO notes in the library and test source code")
    task :TODO do
      require 'source-notes'
      color_map = { :tag => 'magenta', :text => 'yellow' }
      files = $project.package_files.select { |path| test( ?f, path ) }
      SourceNote.scan( 'TODO', files ) do |note|
        puts( note.to_s( color_map ) )
      end
    end
    
    desc( "find and list notes with tag (like FIXME) provided by the tag argument")
    task :with_tag, [:tag] do |t, args|
      tag = args[ :tag ] or fail( "provide a tag argument" )
      
      require 'source-notes'
      color_map = { :tag => 'blue', :text => 'yellow' }
      files = $project.package_files.select { |path| test( ?f, path ) }
      
      SourceNote.scan( tag, files ) do |note|
        puts( note.to_s( color_map ) )
      end
    end
    
  end

end