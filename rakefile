#!/usr/bin/ruby
# encoding: utf-8

####################################################################################################
################################### establish project environment ##################################
####################################################################################################
load './config/antlr3.rb'

def run_task( name )
  Rake::Task.task_defined?( name ) or file( name )
  case task = Rake::Task[ name ]
  when Rake::FileTask then task.needed? and task.invoke
  else task.invoke
  end
end
def abs( path ); File.expand_path( path ); end
def rel( path, dir = '.' ); File.relative_path( path, dir ); end


####################################################################################################
######################################### task definitions #########################################
####################################################################################################

# tasks concerning the development environment
task :update do
  $project.load_task 'update_gems'
end

desc "update gems and setup project development environment"
task :setup => %w(update) do
  $project.load_environment
end

$project.setup? or run_task( :setup )

if $project.setup?
  require 'rake/gempackagetask'
  require 'antlr3/task'
  #require 'rcov/rcovtask'
  
  # tasks concerning the ANTLR java package
  desc "update the antlr jar if necessary"
  task :antlr do
    $project.load_task 'antlr'
  end
  
  for task_lib in %w( notes test doc )
    $project.load_task( task_lib )
  end
  
  Rake::GemPackageTask.new( $project.gem_spec ) do | t |
    t.need_zip = true
  end
  
  
  
  desc( "publish the package to rubyforge/gemcutter if the tests are clean" )
  task 'publish' => %w(test package) do
    cmd = $project.expand!(
      'rubyforge add_%s $(name) $(name) $(version) pkg/$(name)-$(version).%s'
    )
    sh( cmd % %w(release gem) )
    sh( cmd % %w(file zip) )
    sh( $project.expand!("gem push pkg/$(name)-$(version).gem") )
  end
  
  samples = %w(CSS ANTLRv3Grammar Python CPP)
  ANTLR3::CompileTask.define( :name => 'samples' ) do | tasks |
    samples.each do | sample |
      file = "samples/#{ sample }.g"
      output_directory = "samples/#{ sample }"
      tasks.grammar_set( file, :output_directory => output_directory )
    end
  end

  desc( "clean up all project by-products" )
  task :clean => %w(test:clean clobber_package clobber_rdoc samples:clobber)
  
end