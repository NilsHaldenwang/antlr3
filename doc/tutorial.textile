h1. Ruby ANTLR3 Tutorial: Building a CSS Stylesheet Parser

p. Suppose you want to build a library that can manipulate CSS stylesheets from web pages. Inevitably, to manipulate the stylesheets, you will need to find a way to parse the CSS source code. While, for some simple tasks, you might be able to get away with using regular expressions to take care of business, for any significant task, you will need to build a CSS parser.

<!-- INCOMPLETE -->

p. Fortunately, the "W3C":http://www.w3.org provides detailed specifications for the CSS language. We'll stick with the "spec for version 2.1.":http://www.w3.org/TR/CSS21/ Since, for the moment, we're primarily concerned with the syntax of CSS, let's skip ahead to the "formal grammar":http://www.w3.org/TR/CSS21/grammar.html

p. So we just have to translate the grammar into an ANTLR3 grammar. We'll start simply enough with a basic combined parser/lexer grammar. Create a file named <tt>CSS.g</tt>. Here is the bare-bones start of a ruby-targetted ANTLR lexer/parser grammar

« antlr
grammar CSS;

options { language = Ruby; }

stylesheet
  : // incomplete
  ;
»

p. So the "formal grammar":http://www.w3.org/TR/CSS21/grammar.html has a token-level grammar written in a style that uses repetition operators, so that should be a pretty straight foward translation. The lexical scanner is written in @lex@ style, with a number of "macros" doing much of the grunt-work. Let's start with the lexer rules. Since this is just for the sake of learning how to write a grammar, I'm going to skip some of the unicode and case-sensitivity compliance just to keep this all fairly simple.

h2. Translating the Lexer Rules

In ANTLR, a lexer is composed of lexer rules, which begin with a capital letter. The lexer's job is to look at the next few characters in the input stream, look through its list of rule specifications, and decide which rule method to use to build the next token. The lexer rule is implemented as a method of the lexer, the job of which is to  collect all characters matching the lexer rule, perform any actions in the rule, and build a token object based on the matching characters. 

p. So looking through the @lex@ rules, I see we need to make lexer rules for:

* whitespace
* strings (with single or double quotes)
* identifiers ( start with a letter and contains letters, numbers, underscores or dashes )
* numbers with or without a decimal, percentage sign, or a unit
* naked URIs
* C-style <tt>'/* ... */'</tt> comments 

p. Additionally, the grammar contains the following special literal tokens:

* <tt>'<!--'</tt>
* <tt>'-->'</tt>
* <tt>'~='</tt>
* <tt>'|='</tt>
* <tt>'{'</tt> / <tt>'}'</tt>
* <tt>'['</tt> / <tt>']'</tt>
* <tt>'*'</tt>
* <tt>'@import'</tt> / <tt>'@page'</tt> / <tt>'@media'</tt>

Since parser rules can include literals, and ANTLR will automatically insert token definitions for the literals, we will ignore these definitions for now. 

Here's the lexer grammar I came up with:

« antlr
lexer grammar CSS;

/* this is a list of token types which
   do not have corresponding rules, but
   need to be assigned a type number */
tokens {
  INVALID;
  PERCENTAGE;
  EMS;
  EXS;
  FREQ;
  DIMENSION;
  ANGLE;
  LENGTH;
  TIME;
  FUNCTION;
}

/** comments -- the action block sets the token channel to HIDDEN, 
    which hides the token from the parser, without throwing the token 
    away in the token stream */
COMMENT
  : '/*' .* '*/' { $channel = HIDDEN }
  ;

/** whitespace -- frequently in grammars, this would be ignored by
    setting the channel to hidden, but, space is significant in
    CSS selectors **/
WS: ( ' ' | '\t' | '\f' | '\r' | '\n' )+ ;


STRING
  : '"'
    ( ~( '\n' | '\r' | '\f' | '\\' | '"'  )
    | '\\' NEWLINE
    | ESCAPE
    )*
    ( '"'
    | { $type = INVALID }
    )
  | '\''
    ( ~( '\n' | '\r' | '\f' | '\\' | '\'' )
    | '\\' NEWLINE
    | ESCAPE
    )*
    ( '\''
    | { $type = INVALID }
    )
  ;

IMPORTANT
  : '!' ' '* 'important'
  ;

NUMBER
  : ( '0'..'9'+
    | '0'..'9'* '.' '0'..'9'+
    )
    ( '%'   { $type = PERCENTAGE }
    | 'em'  { $type = EMS  }
    | 'ex'  { $type = EXS  }
    | ( 'px' | 'cm' | 'mm' | 'in' | 'pt' | 'pc' )  { $type = LENGTH }
    | ( 'deg' | 'rad' | 'grad' ) { $type = ANGLE }
    | ( 'ms' | 's' ) { $type = TIME }
    | ( 'khz' | 'hz' ) { $type = FREQ }
    | PLAIN_ID { $type = DIMENSION }
    | /* nothing - just a plain number */
    )
  ;

ID
  : '-'?  ( 'a'..'z' | 'A'..'Z' | '_' | NONASCII | ESCAPE )
    ( '_' | 'a'..'z' | 'A'..'Z' | '0'..'9' | '-' | NONASCII | ESCAPE )*
    ( '(' { $type = FUNCTION } |  )
  ;

HASH : '#' ( '_' | 'a'..'z' | 'A'..'Z' | '0'..'9' | '-' | NONASCII | ESCAPE )+ ;

URI
  : 'url(' S STRING S ')'
  | 'url(' S ( '!' | '#' | '$' | '%' | '&' | '*' | '-' | '~' | NONASCII | ESCAPE )* S ')'
  ;

UNICODE_RANGE
  : 'u+' HEX HEX HEX HEX HEX HEX ( '-' HEX HEX HEX HEX HEX HEX )?
  ;

fragment
NONASCII : ~('\u0000' .. '\u007f') ;

fragment
HEX      : '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ;

fragment
ESCAPE  : '\\'
          ( HEX HEX HEX HEX HEX HEX
          | ~( '\n' | '\r' | '\f' | '0'..'9' | 'a'..'f' | 'A' .. 'F' )
          )
        ;

fragment
NEWLINE  : '\r' '\n' | ' ' | '\n' | '\r' | '\f' ;

fragment
S : ( ' ' | '\t' | '\f' | '\r' | '\n' )* ;
»

« raw
h               [0-9a-f]
nonascii        [\200-\377]
unicode         \\{h}{1,6}(\r\n|[ \t\r\n\f])?
escape          {unicode}|\\[^\r\n\f0-9a-f]
nmstart         [_a-z]|{nonascii}|{escape}
nmchar          [_a-z0-9-]|{nonascii}|{escape}
string1         \"([^\n\r\f\\"]|\\{nl}|{escape})*\"
string2         \'([^\n\r\f\\']|\\{nl}|{escape})*\'
invalid1        \"([^\n\r\f\\"]|\\{nl}|{escape})*
invalid2        \'([^\n\r\f\\']|\\{nl}|{escape})*

comment         \/\*[^*]*\*+([^/*][^*]*\*+)*\/
ident           -?{nmstart}{nmchar}*
name            {nmchar}+
num             [0-9]+|[0-9]*"."[0-9]+
string          {string1}|{string2}
invalid         {invalid1}|{invalid2}
url             ([!#$%&*-~]|{nonascii}|{escape})*
s               [ \t\r\n\f]+
w               {s}?
nl              \n|\r\n|\r|\f

%%

{s}                     {return S;}

\/\*[^*]*\*+([^/*][^*]*\*+)*\/          /* ignore comments */

"<!--"                  {return CDO;}
"-->"                   {return CDC;}
"~="                    {return INCLUDES;}
"|="                    {return DASHMATCH;}

{string}                {return STRING;}
{invalid}               {return INVALID; /* unclosed string */}

{ident}                 {return IDENT;}

"#"{name}               {return HASH;}

"@import"               {return IMPORT_SYM;}
"@page"                 {return PAGE_SYM;}
"@media"                {return MEDIA_SYM;}
"@charset"              {return CHARSET_SYM;}

"!"({w}|{comment})*{I}{M}{P}{O}{R}{T}{A}{N}{T}  {return IMPORTANT_SYM;}

{num}{E}{M}             {return EMS;}
{num}{E}{X}             {return EXS;}
{num}{P}{X}             {return LENGTH;}
{num}{C}{M}             {return LENGTH;}
{num}{M}{M}             {return LENGTH;}
{num}{I}{N}             {return LENGTH;}
{num}{P}{T}             {return LENGTH;}
{num}{P}{C}             {return LENGTH;}
{num}{D}{E}{G}          {return ANGLE;}
{num}{R}{A}{D}          {return ANGLE;}
{num}{G}{R}{A}{D}       {return ANGLE;}
{num}{M}{S}             {return TIME;}
{num}{S}                {return TIME;}
{num}{H}{Z}             {return FREQ;}
{num}{K}{H}{Z}          {return FREQ;}
{num}{ident}            {return DIMENSION;}

{num}%                  {return PERCENTAGE;}
{num}                   {return NUMBER;}

{U}{R}{L}"("{w}{string}{w}")"   {return URI;}
{U}{R}{L}"("{w}{url}{w}")"      {return URI;}

{ident}"("              {return FUNCTION;}
»

