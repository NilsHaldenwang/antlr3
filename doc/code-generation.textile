h1. What to Expect of The Code ANTLR Produces

div(note). All ANTLR(ANother Tool For Language Recognition) grammars discussed below assume that <tt>language = Ruby</tt> has been specified in the grammar's option declarations; this primarily concers ruby output, of course. Check out the "ANTLR website":http://www.antlr.org for general documentation on ANTLR's metalanguage and grammar file structure.


h2. Ruby-Targetted Output Files

The primary files produced by ANTLR depend on the type of input grammar. So considering a hypothetical grammar file @Language.g@, the following table lists the files output by ANTLR, for the various grammar types @Language.g@ could contain:

<notextile>
<table>
	<tr style="color: #0B0A0A; font-weight: bold">
		<td colspan="2">Combined Lexer/Parser </td>
	</tr>
	<tr>
		<td><code>LanguageLexer.rb</code></td>
		<td> contains the lexer class definition  </td>
	</tr>
	<tr>
		<td><code>LanguageParser.rb</code></td>
		<td> contains the parser class definition </td>
	</tr>
	<tr style="color: #0B0A0A; font-weight: bold">
		<td colspan="2"> Lexer-Only </td>
	</tr>
	<tr>
		<td><code>Language.rb</code></td>
		<td> contains the lexer class definition  </td>
	</tr>
	<tr style="color: #0B0A0A; font-weight: bold">
		<td colspan="2">Parser-Only  </td>
	</tr>
	<tr>
		<td><code>Language.rb</code></td>
		<td> contains the parser class definition </td>
	</tr>
	<tr style="color: #0B0A0A; font-weight: bold">
		<td colspan="2">Tree Grammar </td>
	</tr>
	<tr>
		<td> <code>Language.rb</code> </td>
		<td> contains the tree-parser class definition </td>
	</tr>
	<tr style="color: #0B0A0A; font-weight: bold">
		<td colspan="2">All Types </td>
	</tr>
	<tr>
		<td> <code>Language.tokens</code> </td>
		<td> contains a list of token definitions extraced from the grammar </td>
	</tr>
</table>
</notextile>

h3. Imported Grammars

p. A grammar that contains one or more @import@ statements will produce will produce a series of additional files containing *delegate recognizer* definitions. The delegate files are named by joining the grammar names together with underscores. So, for example, imagine a lexer grammar file, @Main.g@, which contains the statements

bc.   import Names;
import Numbers;

Furthermore, just for the sake of completeness, imagine that the imported grammar, @Names.g@ also imports a grammar via:

bc.   import Keywords;

« cmd
antlr4ruby Main.g
»

will produce these files:

- @Main.rb@       := the primary lexer class definition
- @Main.tokens@   := token definitions extracted from the Main grammar
- @Main_Names.rb@ := a special delegate definition of the lexer class defined by the Names grammar, which is used by Main lexer class
- @Names.tokens@  := token definitions extracted from the Names grammar
- @Main_Names_Keywords.rb@ := a delegate lexer class definition which is used by the Names delegate lexer class 
- @Keywords.tokens@ := token definitions extracted from the Keywords grammar
- @Main_Numbers.rb@ := a special delegate definition of the lexer class defined by the Numbers grammar, which is used by Main lexer class
- @Numbers.tokens@ := token definitions extracted from the Numbers grammar

"For more info on importing grammars...":http://www.antlr.org/wiki/display/ANTLR3/Composite+Grammars


