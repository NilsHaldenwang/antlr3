So, you want to write a program that works with a language of some sort. Perhaps you are writing a *domain specific language (DSL)* to provide an intuitive, focused tool targeted for performing a task. Maybe you would like to write a development utility for an existing programming language, like a code beautifier or a documentation generator. You may even be ambitious enough to design and implement your own general-purpose programming language, complete with compiler, interpreter, or byte-code generator. Unless the language of concern is very simple, chances are you will not be able to write code that recognizes the language using plain old regular expressions. 

When trying to accurately extract any meaningful information from source code written in computer languages that feature pithy, succinct constructs, programs usually demand more complex and intricate recognition algorithms with power beyond basic regular expression pattern matching. Typically, the task of detecting powerful syntactic structures, like nested statements or operator-based expressions, is divided into multiple stages, such as lexical analysis (*lexing*) and syntactic analysis (*parsing*). Often, the program will need to maintain a meaningful representation of the source code in memory throughout execution; the parser will need to convert the raw source code into *abstract syntax tree* (AST) representation for further processing. 

* basically you use language compilers to turn high-level conceptual specifications of syntax rules into low-level state machine code
* there are a number of programs that generate recognition code
** YACC (or RACC) - 
