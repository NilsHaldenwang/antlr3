h1. About ANTLR

h2. What's <a href="http://www.antlr.org">ANTLR</a>?

<b>ANTLR(ANother Tool for Language Recognition)</b> is a program that generates code for performing a variety of language recognition tasks: lexing, parsing, abstract syntax tree construction and manipulation, tree structure recognition, and input translation. The tool is simillar to other parser generators: ANTLR takes in a grammar specification and then produces source code that recognizes the language.

While the tool itself is implemented in Java, it has an extensible design that allows for code generation in other programming languages. To implement an ANTLR language target, a developer may supply a set of templates written in the "StringTemplate":http://www.stringtemplate.org language. The grammar specification is written in a combination of ANTLR's metalanguage and the target programming language.

h2. What does it offer over other parser generators?

* ANTLR's grammar specifications are more human-readable and logical than most other language recognition tools (like YACC)
** it uses its own concept of "<notextile>LL(*)</notextile>" arbitrary lookahead to permit a developer to write a language using a structure close to how a person understands the language
** it uses familliar aspects of "EBNF":http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form and regular expression syntax, such as repetition operators like @*@, @+@, and @?@
* it combines lexer and parser design. You don't have to provide your own lexer code (though you still can if you need to)
* all generated code is object-oriented and organized into classes
* it is tailored for common language recognition tasks
** it features integrated optional Abstract Syntax Tree generation
** it can generate tree parsers to rewrite, translate, and/or evaluate ASTs
** it features integrated automatic input translation using templates

h1. About the Ruby @antlr3@ Project

h2. What's the Ruby @antlr3@ project?

It's a collection of ruby code and templates, with a dash of Java code, wrapped into a standard ANTLR package. This package permits Ruby developers to use ANTLR to generate recognizers written in Ruby.

h2. Doesn't ANTLR already have a Ruby target?

Yes, it does (well, sort of). With all due respect to the author of the original ruby target, the target only features rudimentary parser/lexer generation, making writing recognizers for more sophisticated languages difficult or even impossible.

h2. So how does this project differ from ANTLR's default ruby target?

This project completely implements all of ANTLR's features. It provides all of the features implemented in ANTLR's Java and Python targets, including:

* AST(Abstract Syntax Tree) construction
* Built-in automatic test scripts to quickly try out your recognizer
* AST parser generation
* Debug mode features
* Grammar profiling features
* Template output mode (using a variation of @ERB@ instead of @StringTemplate@)
* Lexer filter mode