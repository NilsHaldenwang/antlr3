#!/usr/bin/ruby
# encoding: utf-8

Ruby.setup(
  :project => 'antlr3',
  :initial_environments => [],
  :monitor => false,
  :record => false
)

require 'erb'
require 'yaml'
require 'string-template'
require 'core/array/pad'

class StringTemplate::HTMLFormatter
  include ERB::Util
  TEMPLATES = {}
  for name, text in YAML.load(DATA.read)
    TEMPLATES[name.to_sym] = ERB.new(text, $SAFE, '<>')
    
    module_eval(<<-END, __FILE__, __LINE__)
      def #{name}
        TEMPLATES[:#{name}].result(binding)
      end
    END
  end
  TEMPLATES.freeze
  
  def initialize(group)
    @group = group
    @total_lines = @group.tokens.last.line
    number_digits = Math.log10(@total_lines).floor + 1
    @numbering_format = "%0#{number_digits}i"
  end
  
  def render(target = $stdout)
    html = document
    html.gsub!(/^\s*<\-\-\|/, '')
    target.puts(html)
  end
  
  def encode_token_text(text)
    output = ''
    for byte in text.bytes
      output <<
        case byte
        when ?> then '&gt;'
        when ?< then '&lt;'
        when ?" then '&quot;'
        when ?& then '&amp;'
        when ?\s then '&nbsp;'
        when ?\t then 
        end
    end
  end
  
  def i(text, level = 2)
    indentation = ' ' * level
    text.strip.gsub(/\n/, "\n" << indentation)
  end
  
  def clean(name)
    name.to_s.gsub(/[@\.]/,'')
  end
  
end

for stg_file in ARGV
  parser = StringTemplate::GroupParser.new
  group  = parser.parse_file(stg_file)
  formatter = StringTemplate::HTMLFormatter.new(group)
  formatter.render
end
__END__
---
document: |-
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
  <html>
    <%=i head %>
    <%=i body %>
  </html>
head: |-
  <head>
    <title><%=h title %></title>
    <link href="string-template.css" rel="stylesheet" type="text/css" />
    <script src="js/prototype.js"></script>
    <script src="js/scriptaculous.js"></script>
    <script src="js/effects.js"></script>
  </head>
body: |-
  <body>
  <div id="main">
    <%=i group_summary %>
    <%=i group_templates %>
  </div>
  </body>
title: |-
  <%= @group.file %>
group_summary: |-
  <table class="group_summary">
    <tr class="title">
      <td id="keyword_group" class="label">group</td>
      <td id="group_name" class="value"><%=h @group.name %></td>
    </tr>
    <tr class="location">
      <td id="keyword_in_file" class="label">in file...</td>
      <td id="group_file" class="value"><%=h @group.file %></td>
    </tr>
  </table>
group_templates: |-
  <div class="group_templates">
  
  <% for @template in @group.templates.values.sort_by { |t| t.index } %>
  <%= string_template %>
  <% end %>
  
  </div>
string_template: |-
  <div class="template" id="t<%= clean(@template.name) %>">
    <%=i template_head %>
  <% unless @template.parameters.empty? %>
    <%=i template_parameters %>
  <% end %>
    <%=i template_body %>
  </div>
template_head: |-
  <table class="head">
    <tr>
      <td class="name"><%= @template.name %></td>
      <td class="line_number">(line <%= @template.line %>)</td>
    </tr>
  </table>
template_parameters: |-
  <table class="parameters" id="tparam_<%= clean(@template.name) %>">
  <% @template.parameters.each_slice(5) do |row| %>
    <tr>
    <% for param in row.pad(5) %>
      <td><center><%= param && param.name %></center></td>
    <% end %>
    </tr>
  <% end %>
  </table>
template_body: |-
    
  <pre class="body" id="tbody_<%= clean(@template.name) %>">
  <% for line in @template.to_html  %>
  <--|<%= line.chomp %>
  <% end %>
  </pre>
