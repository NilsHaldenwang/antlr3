#!/usr/bin/ruby
# encoding: utf-8

__DIR__ = File.dirname( __FILE__ )
load File.join( __DIR__, 'script-helper.rb' )

require 'main'
require 'enhanced-test/session'

Main do
  def session
    @session ||= ANTLR3::Test::Session.new( session_options )
    block_given? ? yield( @session ) : @session
  end
  
  def run_tests
    session do | s |
      yield( s )
      s.run_tests
      s.save
    end
  end
  
  def session_options
    {
      :data_directory => $project.test.results,
      :output => stdout,
      :load_path => [ $project.lib ],
      :functional => test_options,
      :unit => test_options,
      :profile => { :require => $project.bundler.environment }
    }
  end
  
  def test_options
    {
      :load_path => [ $project.dev_lib ],
      :require => $project.path( 'config/antlr3.rb' ),
      :arguments => [
        '--require', $project.dev_lib( 'enhanced-test.rb' ),
        '--format', "ANTLRFormatter",
        '--runner', "ANTLRRunner",
        '--backtrace'
      ]
    }
  end
  
  mixin :test_arguments do
    argument( :tests ) do
      description( <<-END.here_flow! )
      | any combination of category names, test names, paths to test files
      | or `all'
      END
      default( 'all' )
      arity( -1 )
    end
    
    def test_files
      files = []
      for arg in params[:tests].values
        if arg == 'all'
          files += all
        elsif File.file?( arg )
          files << arg
        elsif File.directory?( arg )
          files += Dir.children( arg ).select { | f | File.file?( f ) }
        elsif matches = match_tests?( arg )
          files += matches
        else
          warn("can't associate argument %p with any test files -- ignoring" % arg)
        end
      end
      return( files.uniq )
    end
    
    def match_tests?( a )
      ( ts = match_tests( a ) and ! ts.empty? ) ? ts : false
    end
  end
  
  mixin :all_types do
    argument( :types ) do
      description( <<-'END'.here_indent! )
      | `all', `functional', `unit', or `benchmark'
      END
      
      default( 'all' )
      arity( -1 )
    end
    
    def add_tests( s )
      include_types = [ false, false, false ]
      for keyword in params[ :types ].values
        case keyword
        when 'all' then include_types.map! { true }
        when 'unit' then include_types[0] = true
        when 'functional' then include_types[1] = true
        when 'benchmark' then include_types[2] = true
        end
      end
      include_types[0] and s.add_unit( $project.test.unit!( '*.rb' ) )
      include_types[1] and s.add_functional( $project.test.functional!('*','*.rb') )
      include_types[2] and s.add_benchmark( $project.test.performance!('*.yaml') )
    end
  end
  
  mode :unit do
    mixin :test_arguments
    
    def run
      run_tests { | s | s.add_unit( test_files ) }
    end
    
    def all
      $project.test.unit!('test-*.rb')
    end
    
    def match_tests( arg )
      $project.test.unit!( "*#{ arg }*.rb" )
    end
    
  end
  
  mode :functional do
    mixin :test_arguments
    
    def run
      run_tests { | s | s.add_functional( test_files ) }
    end
    
    def all
      $project.test.functional!('*','*.rb')
    end
    
    def match_tests( arg )
      $project.test.functional!( name + '*', '*.rb' ) +
      $project.test.functional!( '*', name + '*.rb' )
    end
  end
  
  for type in %w( benchmark profile )
    eval( <<-END, binding, __FILE__, __LINE__ + 1 )
      mode :#{ type } do
        mixin :test_arguments
        
        run { run_tests { | s | s.add_#{ type }( test_files ) } }
        
        def all() $project.test.performance!( '*.yaml' ) end
        def match_tests( arg )
          $project.test.performance!( "\#{arg}*.yaml" )
        end
      end
    END
  end
  
  mode :clean do
    mixin :all_types
    
    def run
      session do | s |
        add_tests( s )
        s.clean( :verbose => true, :dry_run => false )
      end
    end
  end
  
  mode :run do
    mixin :all_types
    run { run_tests { | s | add_tests( s ) } }
  end
  run { help! }
end
