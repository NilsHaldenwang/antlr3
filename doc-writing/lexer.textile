« style
  .source-file { border: 1px solid black; background-color: #0B0A0A; font-family: monofur, Crystal, monospace; }
  .source-file .subtitle { color: black;  padding: 3px 5px; background-color: #f92672; font-size: 14pt; border-bottom: 1px dashed black; }
»
h1. Ruby Output from Lexer Grammars

If you provide either a @lexer@ grammar or a @combined@ grammar, the ANTLR tool will generate a ruby source file containing a lexer definition. This document discusses what to expect from the lexer code, how to use it, and some of the particulars of adapting ANTLR grammars for ruby lexer output.

h2. A Sample Lexer Grammar


<div class="source-file">
div(subtitle). *Standard Calculator Nonsense:* @Arithmetic.g@
« antlr
grammar Arithmetic;
options { 
  language = Ruby;
  backtrack = true;
}

expressions
      : add (';' add)*
      ;

add  : mult ( '+' mult)*
      | mult ( '-' mult)*
      ;

mult : value ( '*' value)*
      | value ( '/' value)*
      ;

value: FLOAT
      | HEXADECIMAL
      | DECIMAL
      | OCTAL
      | BINARY
      | '(' add ')'
      ;

FLOAT
  : '-'? ('0'..'9')+ '.' ('0'..'9')+ EXPONENT?
  | DECIMAL EXPONENT
  ;

fragment
EXPONENT
  : ('e'|'E') '-'? DECIMAL
  ;

HEXADECIMAL
  : '-'? '0x' ('a'..'f' | 'A'..'F' | '0'..'9')+
  ;

DECIMAL
  : '-'? '1'.. '9' ('0'..'9')*
  ;

OCTAL
  : '-'? '0' ('0'..'7')*
  ;

BINARY
  : '-'? '0b' ('0'..'1')+
  ;

WS: (' ' | '\t' | '\r' | '\n')+ { $channel = HIDDEN }
  ;
»
</div>

Running the command

« cmd
antlr4 Arithmetic.g
»

will produce some warnings about the grammar, which for the purpose of this tutorial are not important. ANTLR will create these files:

* @./Arithmetic/ArithmeticLexer.rb@
* @./Arithmetic/ArithmeticParser.rb@
* @./Arithmetic/Arithmetic.tokens@

The basic structure source code of @ArithmeticLexer.rb@ is printed below.

« ruby
#!/usr/bin/env ruby
# 
# generated using ANTLR Version: 3.2 Oct 17, 2009 11:23:44
# input grammar file: Arithmetic.g
# generated at: 2009-10-24 11:47:24

# ~~> 18

module Arithmetic
  # TokenData defines all of the token type integer values
  # as constants, which will be included in all 
  # ANTLR-generated recognizers.
  const_defined?(:TokenData) or TokenData = ANTLR3::TokenScheme.new

  module TokenData
    define_tokens(
      :EXPONENT => 9, :WS => 10, :T__16 => 16, :T__15 => 15, 
      :T__17 => 17, :DECIMAL => 6, :T__12 => 12, :T__11 => 11, 
      :T__14 => 14, :T__13 => 13, :OCTAL => 7, :HEXADECIMAL => 5, 
      :FLOAT => 4, :BINARY => 8, :EOF => -1
    )
  end
  
  class Lexer < ANTLR3::Lexer
    @grammar_home = Arithmetic
    
    include TokenData
    
    generated_using('Arithmetic.g', '3.2 Oct 17, 2009 11:23:44')
    
    # ~~> 54
    
    def initialize(input=nil, options = {})
      super(input, options)
    end
    
    # - - - - - - - - - - - lexer rules - - - - - - - - - - - -
    # ~~> 228
    
    # lexer rule float! (FLOAT)
    # (in Arithmetic.g)
    def float!
      # ~~> 338
    end
    
    # lexer rule exponent! (EXPONENT)
    # (in Arithmetic.g)
    def exponent!
      # ~~> 377
    end
    
    # etc. ~~> 679

    # main rule used to study the input at the current position,
    # and choose the proper lexer rule to call in order to
    # fetch the next token
    # 
    # usually, you don't make direct calls to this method,
    # but instead use the next_token method, which will
    # build and emit the actual next token
    def token!
      # ~~> 745
    end
    
    
    # - - - - - - - - - - DFA definitions - - - - - - - - - - -
    class DFA5 < ANTLR3::DFA
      # ~~> 773
    end
    class DFA16 < ANTLR3::DFA16
      # ~~> 818
    end
    
    private
    
    def initialize_dfas
      super rescue nil
      @dfa5 = DFA5.new(self, 5)
      @dfa16 = DFA16.new(self, 16)
    end
  end # class Lexer
end #module Arithmetic

if __FILE__ == $0 and ARGV.first != '--'
  main = ANTLR3::Main::LexerMain.new(Arithmetic::Lexer)
  main.execute(ARGV)
end
»

h2. Lexer Methods

Plain ANTLR lexer rules are essentially recipes for tokens that follow certain conventions:

* A lexer rule name must be an +ID+ that begin with a capital letter <tt>A-Z</tt>
* Otherwise, the names may follow any convention you wish, though typically they are "constant style" all-caps n' underscores affairs, like @CLASS_NAME@, @HEX_INTEGER@, or @WHATEVA_THIS_IS@
* They don't take any arguments and don't have any special return value declarations (though +fragments+ can -- more on that below)


