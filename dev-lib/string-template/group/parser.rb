#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "group-parser.y".
#

require 'racc/parser'


#!/usr/bin/ruby
# encoding: utf-8


module StringTemplate
class Group


class Parser < Racc::Parser

module_eval <<'..end group-parser.y modeval..id460bb5fc03', 'group-parser.y', 117

class ParseError < Racc::ParseError
  attr_reader :file, :token, :input, :stack
  
  def initialize(input, token, stack)
    super("parse error on value %s(%p) @ %s" % [token.type, token.text, token.location])
    @input = input
    @token = token
    @stack = stack
  end
  
  def location; @token.location; end
  def text; @token.text; end
  def type; @token.type; end
  def file; location.file; end
  def line; location.line; end
  def column; location.column; end
  def position; location.position; end
  
  def source_range(width = 2)
    line_index = line - 1
    start  = line_index - width
    finish = line_index + width
    start < 0 and start = 0
    finish >= @input.length and finish = @input.length - 1
    
    digits = Math.log10(finish + 1).floor + 1
    
    @input[start..finish].each_with_index.map do |ln, i|
      ln_number = start + i + 1
      mask = ln_number == line ? "==> %#{digits}i | %s" : "    %#{digits}i | %s"
      mask % [ln_number, ln]
    end.join("\n")
  end
  
end

def parse(source, file_name = '(string)')
  @group = Group.new(file_name)
  @lexer = Lexer.new(source, :file => file_name)
  yyparse(self, :scan)
  @group.tokens.replace(@lexer.tokens(false))
  return @group
end

def on_error(type, token, stack)
  error = ParseError.new(@lexer.scanner.string.split(/\r?\n/), token, stack)
  raise(error)
end

def parse_file(path)
  test(?f, path = path.to_s) or
    raise ArgumentError, "%p is not an existing file" % path
  source = File.read(path)
  parse(source, path)
end

def scan
  @lexer.each do |token|
    if token.type == :COMMENT
      @group.add(Comment.new(token.index))
    else
      yield(token.type, token)
    end
  end
  yield(false, '$')
end

def template!
  @member = Template.new
end

def type_map!
  @member = TypeMap.new
end

def alias!(new, old)
  orig = @group.templates[old] or
    raise "attempt to alias unknown template %p as %p" % [old, new]
  @member = orig.alias! new
end

def add!
  @member.nil? and return nil
  @member.span = @start..@finish
  @group.add @member
  @start = @finish = @member = nil
end

def string_literal(text)
  text = text.dup
  if text =~ /\A<</
    text.gsub!(/\A<<\n?/, '')
    text.gsub!(/\n?>>\Z/, '')
  elsif text =~ /\A"/
    text.gsub!(/\A"/, '')
    text.gsub!(/"\Z/, '')
    text.gsub!(/\\"/, '"')
  end
  return text
end

..end group-parser.y modeval..id460bb5fc03

##### racc 1.4.5 generates ###

racc_reduce_table = [ 
 0, 0, :racc_error,
 2, 21, :_reduce_1,
 3, 22, :_reduce_2,
 4, 22, :_reduce_3,
 1, 24, :_reduce_none,
 2, 24, :_reduce_none,
 1, 24, :_reduce_none,
 2, 25, :_reduce_7,
 2, 26, :_reduce_none,
 1, 27, :_reduce_9,
 3, 27, :_reduce_10,
 1, 23, :_reduce_none,
 2, 23, :_reduce_none,
 1, 28, :_reduce_13,
 1, 28, :_reduce_14,
 0, 34, :_reduce_15,
 6, 29, :_reduce_16,
 0, 35, :_reduce_17,
 7, 29, :_reduce_18,
 1, 31, :_reduce_19,
 4, 31, :_reduce_20,
 1, 36, :_reduce_21,
 4, 36, :_reduce_22,
 1, 33, :_reduce_none,
 3, 33, :_reduce_none,
 1, 37, :_reduce_25,
 3, 37, :_reduce_26,
 3, 37, :_reduce_27,
 1, 32, :_reduce_28,
 1, 32, :_reduce_29,
 0, 39, :_reduce_30,
 4, 30, :_reduce_31,
 3, 30, :_reduce_32,
 2, 38, :_reduce_33,
 3, 38, :_reduce_34,
 3, 38, :_reduce_35,
 5, 38, :_reduce_36,
 1, 41, :_reduce_none,
 3, 41, :_reduce_none,
 3, 42, :_reduce_39,
 3, 40, :_reduce_40,
 1, 43, :_reduce_41,
 1, 43, :_reduce_42,
 1, 43, :_reduce_none,
 0, 43, :_reduce_none ]

racc_reduce_n = 45

racc_shift_n = 79

racc_action_table = [ 
    71,    71,     6,    44,    68,    20,    21,    22,    29,     6,
     4,    72,    72,    73,    73,    69,    27,     4,    50,    15,
    50,    16,    33,    53,    52,    53,    57,    57,    58,    58,
    61,    62,    34,    36,    37,    39,    41,    43,    22,    45,
    46,    47,    48,    49,    31,    56,   -17,    60,    24,    39,
    64,    65,    66,    67,    23,    13,    12,    11,     2,    78 ]

racc_action_check = [ 
    65,    67,     1,    35,    54,    11,    11,    11,    16,     5,
     1,    65,    67,    65,    67,    54,    16,     5,    68,    10,
    43,    10,    21,    68,    43,    43,    60,    45,    60,    45,
    47,    47,    22,    24,    25,    26,    27,    30,    18,    37,
    38,    39,    40,    41,    17,    44,    15,    46,    13,    48,
    49,    50,    51,    53,    12,     4,     3,     2,     0,    76 ]

racc_action_pointer = [ 
    56,    -1,    54,    56,    52,     6,   nil,   nil,   nil,   nil,
    11,     1,    54,    36,   nil,    43,     5,    40,    32,   nil,
   nil,    19,    29,   nil,    30,    25,    32,    33,   nil,   nil,
    20,   nil,   nil,   nil,   nil,    -4,   nil,    29,    31,    28,
    35,    31,   nil,     6,    42,    13,    37,    16,    46,    47,
    46,    34,   nil,    48,    -3,   nil,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,    -3,   nil,    -2,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil ]

racc_action_default = [ 
   -45,   -45,   -45,   -45,   -45,    -1,   -19,   -11,   -13,   -14,
   -45,   -45,   -45,   -45,   -12,   -15,   -30,   -45,    -4,    -6,
    -2,   -45,   -45,    79,   -45,   -45,   -45,   -45,   -32,   -21,
   -45,    -3,    -5,    -7,    -9,    -8,   -20,   -45,   -45,   -25,
   -23,   -45,   -31,   -45,   -45,   -45,   -45,   -45,   -45,   -45,
   -45,   -45,   -33,   -45,   -45,   -37,   -10,   -29,   -28,   -16,
   -45,   -26,   -27,   -24,   -22,   -44,   -34,   -44,   -45,   -35,
   -18,   -43,   -41,   -42,   -39,   -40,   -45,   -38,   -36 ]

racc_goto_table = [ 
    51,    55,    38,    59,    19,     7,    74,    35,    75,    14,
    18,    32,    17,    25,    26,    28,    42,    30,    70,     5,
    54,     1,     3,   nil,    63,    76,    77 ]

racc_goto_check = [ 
    20,    22,    13,    12,     6,     8,    23,     7,    23,     8,
     5,     6,     4,    14,    15,    16,    18,    19,    12,     3,
    21,     2,     1,   nil,    13,    20,    22 ]

racc_goto_pointer = [ 
   nil,    22,    21,    18,     1,    -1,    -7,   -15,     4,   nil,
   nil,   nil,   -42,   -24,    -2,    -1,    -1,   nil,   -14,     1,
   -43,   -23,   -42,   -59 ]

racc_goto_default = [ 
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,
     9,    10,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_token_table = { 
 false => 0,
 Object.new => 1,
 :GROUP => 2,
 :ID => 3,
 :SEMICOLON => 4,
 :COLON => 5,
 :IMPLEMENTS => 6,
 :COMMA => 7,
 :OPEN_P => 8,
 :CLOSE_P => 9,
 :DEFINE => 10,
 :AT => 11,
 :DOT => 12,
 :ASSIGN => 13,
 :STRING => 14,
 :ANONYMOUS_TEMPLATE => 15,
 :BIG_STRING => 16,
 :OPEN_B => 17,
 :CLOSE_B => 18,
 :DEFAULT => 19 }

racc_use_result_var = false

racc_nt_base = 20

Racc_arg = [ 
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [ 
'$end',
'error',
'GROUP',
'ID',
'SEMICOLON',
'COLON',
'IMPLEMENTS',
'COMMA',
'OPEN_P',
'CLOSE_P',
'DEFINE',
'AT',
'DOT',
'ASSIGN',
'STRING',
'ANONYMOUS_TEMPLATE',
'BIG_STRING',
'OPEN_B',
'CLOSE_B',
'DEFAULT',
'$start',
'group',
'group_declaration',
'members',
'group_properties',
'supergroup',
'implements',
'interface_list',
'member',
'template',
'non_template_member',
'name',
'template_text',
'parameter_list',
'@1',
'@2',
'alias_name',
'parameter',
'map',
'@3',
'default_pair',
'key_pairs',
'key_pair',
'key_value' ]

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'group-parser.y', 6
  def _reduce_1( val, _values)
 @group
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 8
  def _reduce_2( val, _values)
 @group.name = val[1].text
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 9
  def _reduce_3( val, _values)
 @group.name = val[1].text
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

module_eval <<'.,.,', 'group-parser.y', 15
  def _reduce_7( val, _values)
 @group.supergroup = val[1].text
  end
.,.,

 # reduce 8 omitted

module_eval <<'.,.,', 'group-parser.y', 19
  def _reduce_9( val, _values)
 @group.interfaces << val[0].text
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 23
  def _reduce_10( val, _values)
                          @group.interfaces << val[2].text
  end
.,.,

 # reduce 11 omitted

 # reduce 12 omitted

module_eval <<'.,.,', 'group-parser.y', 27
  def _reduce_13( val, _values)
 add!
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 28
  def _reduce_14( val, _values)
 add!
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 30
  def _reduce_15( val, _values)
 template!
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 35
  def _reduce_16( val, _values)
                          @member.name       = val[0]
                          val[6]
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 35
  def _reduce_17( val, _values)
 template!
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 40
  def _reduce_18( val, _values)
                          @member.name       = val[0]
                          val[6]
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 45
  def _reduce_19( val, _values)
                          @start = val[0].index
                          val[0].text
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 49
  def _reduce_20( val, _values)
                          @start = val[0].index
                          val[0,4].map { |tk| tk.text }.join('')
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 54
  def _reduce_21( val, _values)
                          @finish = val[0].index
                          val[0].text
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 58
  def _reduce_22( val, _values)
                          @finish = val[3].index
                          val[0,4].map { |tk| tk.text }.join('')
  end
.,.,

 # reduce 23 omitted

 # reduce 24 omitted

module_eval <<'.,.,', 'group-parser.y', 62
  def _reduce_25( val, _values)
 @member.parameter!(val[0].text)
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 67
  def _reduce_26( val, _values)
                          name = val[0].text; value = val[2].text
                          @member.parameter!(name, string_literal(value))
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 71
  def _reduce_27( val, _values)
                          name = val[0].text; value = val[2].text
                          @member.parameter!(name, string_literal(value))
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 76
  def _reduce_28( val, _values)
                          @finish = val[0].index
                          val[0]
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 80
  def _reduce_29( val, _values)
                          @finish = val[0].index
                          val[0].text
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 81
  def _reduce_30( val, _values)
 type_map!
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 84
  def _reduce_31( val, _values)
                          @member.name = val[0]
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 87
  def _reduce_32( val, _values)
                          alias!(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 88
  def _reduce_33( val, _values)
 @finish = val[1].index
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 89
  def _reduce_34( val, _values)
 @finish = val[2].index
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 90
  def _reduce_35( val, _values)
 @finish = val[2].index
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 91
  def _reduce_36( val, _values)
 @finish = val[4].index
  end
.,.,

 # reduce 37 omitted

 # reduce 38 omitted

module_eval <<'.,.,', 'group-parser.y', 99
  def _reduce_39( val, _values)
                          @member.pair! string_literal(val[0]), val[2]
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 100
  def _reduce_40( val, _values)
 @member.default = val[2]
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 102
  def _reduce_41( val, _values)
 string_literal val[0]
  end
.,.,

module_eval <<'.,.,', 'group-parser.y', 103
  def _reduce_42( val, _values)
 string_literal val[0]
  end
.,.,

 # reduce 43 omitted

 # reduce 44 omitted

 def _reduce_none( val, _values )
  val[ 0 ]
 end

end   # class Parser

end
end
